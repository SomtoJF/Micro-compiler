(()=>{"use strict";console.log("compiling..."),function(e){for(var t=[],s=0;s<e.length;s++){var a=e.charAt(s);if("("!==a)if(")"!==a){if(!/\s/.test(a)){var r=/[0-9]/;if(r.test(a)){for(var l="";r.test(a);)l+=a,a=e[++s];t.push({type:"number",value:l}),--s}else if('"'!==a){var u=/[a-z]/i;if(u.test(a)){for(l="";u.test(a);)l+=a,a=e[++s];t.push({type:"name",value:l})}}else{l="";for(a=e[++s];'"'!==a;)l+=a,a=e[++s];t.push({type:"string",value:l})}}}else t.push({type:"paren",value:")"});else t.push({type:"paren",value:"("})}console.log(t)}("(add 2 (subtract 6 2))")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJtQkFFQUEsUUFBUUMsSUFBSSxnQkNBWixTQUFtQkMsR0FHZixJQUZBLElBQUlDLEVBQThCLEdBRXpCQyxFQUFVLEVBQUdBLEVBQVVGLEVBQU1HLE9BQVFELElBQVcsQ0FDckQsSUFBSUUsRUFBT0osRUFBTUssT0FBT0gsR0FFeEIsR0FBYSxNQUFURSxFQUtKLEdBQWEsTUFBVEEsR0FNSixJQURpQixLQUNGRSxLQUFLRixHQUFwQixDQUlBLElBQUlHLEVBQVUsUUFDZCxHQUFJQSxFQUFRRCxLQUFLRixHQUFqQixDQU9JLElBTkEsSUFBSUksRUFBUSxHQU1MRCxFQUFRRCxLQUFLRixJQUNoQkksR0FBU0osRUFDVEEsRUFBT0osSUFBUUUsR0FJbkJELEVBQU9RLEtBQUssQ0FBRUMsS0FBTSxTQUFVRixNQUFLLE1BSWpDTixDLE1BWU4sR0FBYSxNQUFURSxFQUFKLENBY0EsSUFBTU8sRUFBVSxTQUNoQixHQUFJQSxFQUFRTCxLQUFLRixHQUFPLENBRXBCLElBRElJLEVBQVEsR0FDTEcsRUFBUUwsS0FBS0YsSUFDaEJJLEdBQVNKLEVBQ1RBLEVBQU9KLElBQVFFLEdBRW5CRCxFQUFPUSxLQUFLLENBQUVDLEtBQU0sT0FBUUYsTUFBSyxHLE1BckJyQyxDQUNRQSxFQUFRLEdBSVosSUFGQUosRUFBT0osSUFBUUUsR0FFQyxNQUFURSxHQUNISSxHQUFTSixFQUNUQSxFQUFPSixJQUFRRSxHQUduQkQsRUFBT1EsS0FBSyxDQUFFQyxLQUFNLFNBQVVGLE1BQUssRyxRQWpEbkNQLEVBQU9RLEtBQUssQ0FBRUMsS0FBTSxRQUFTRixNQUFPLFdBTHBDUCxFQUFPUSxLQUFLLENBQUVDLEtBQU0sUUFBU0YsTUFBTyxLLENBb0U1Q1YsUUFBUUMsSUFBSUUsRUFFaEIsQ0R6RUEsQ0FGYyx5QiIsInNvdXJjZXMiOlsid2VicGFjazovL01pY3JvLWNvbXBpbGVyLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vTWljcm8tY29tcGlsZXIvLi9zcmMvVG9rZW5pemVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0b2tlbml6ZSBmcm9tICcuL1Rva2VuaXplcic7XG5cbmNvbnNvbGUubG9nKCdjb21waWxpbmcuLi4nKTtcblxuY29uc3QgaW5wdXQgPSAnKGFkZCAyIChzdWJ0cmFjdCA2IDIpKSc7XG5cbnRva2VuaXplKGlucHV0KTtcbiIsImltcG9ydCB7IHRva2VuaXplclJldHVyblR5cGUsIFRva2VuSW50ZXJmYWNlIH0gZnJvbSAnLi9UeXBlcyc7XG5cbmZ1bmN0aW9uIHRva2VuaXplcihpbnB1dDogc3RyaW5nKTogdG9rZW5pemVyUmV0dXJuVHlwZSB7XG4gICAgbGV0IHRva2VuczogdG9rZW5pemVyUmV0dXJuVHlwZSA9IFtdO1xuXG4gICAgZm9yIChsZXQgY3VycmVudCA9IDA7IGN1cnJlbnQgPCBpbnB1dC5sZW5ndGg7IGN1cnJlbnQrKykge1xuICAgICAgICBsZXQgY2hhciA9IGlucHV0LmNoYXJBdChjdXJyZW50KTtcblxuICAgICAgICBpZiAoY2hhciA9PT0gJygnKSB7XG4gICAgICAgICAgICB0b2tlbnMucHVzaCh7IHR5cGU6ICdwYXJlbicsIHZhbHVlOiAnKCcgfSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGFyID09PSAnKScpIHtcbiAgICAgICAgICAgIHRva2Vucy5wdXNoKHsgdHlwZTogJ3BhcmVuJywgdmFsdWU6ICcpJyB9KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IFdISVRFU1BBQ0UgPSAvXFxzLztcbiAgICAgICAgaWYgKFdISVRFU1BBQ0UudGVzdChjaGFyKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgTlVNQkVSUyA9IC9bMC05XS87XG4gICAgICAgIGlmIChOVU1CRVJTLnRlc3QoY2hhcikpIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9ICcnO1xuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIExvb3AgdGhyb3VnaCBlYWNoIGNoYXJhY3RlciBpbiB0aGUgc2VxdWVuY2UgdW50aWwgd2UgZW5jb3VudGVyIGEgY2hhcmFjdGVyIHRoYXRcbiAgICAgICAgICAgICAqIGlzIG5vdCBhIG51bWJlciwgcHVzaGluZyBlYWNoIGNoYXJhdGVyIHRoYXQgaXMgYSBudW1iZXIgdG8gb3VyIHZhbHVlIGFuZCBpbmNyZW1lbnRpbmdcbiAgICAgICAgICAgICAqIGBjdXJyZW50YCBhcyB3ZSBnb1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB3aGlsZSAoTlVNQkVSUy50ZXN0KGNoYXIpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgKz0gY2hhcjtcbiAgICAgICAgICAgICAgICBjaGFyID0gaW5wdXRbKytjdXJyZW50XTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQWZ0ZXIgdGhhdCB3ZSBwdXNoIG91ciBgbnVtYmVyYCB0b2tlbiB0byB0aGUgYHRva2Vuc2AgYXJyYXkuXG4gICAgICAgICAgICB0b2tlbnMucHVzaCh7IHR5cGU6ICdudW1iZXInLCB2YWx1ZSB9KTtcblxuICAgICAgICAgICAgLy8gQW5kIHdlIGNvbnRpbnVlIG9uLlxuICAgICAgICAgICAgLy8gY3VycmVudCBpcyB0aGUgY2hhciBhZnRlciB0aGUgbnVtYmVyIHNvIHdlIG5lZWQgdG8gZGVjcmVtZW50IGl0IHNvIHRoYXQgY2hhciBnZXRzIHRva2VuaXplZFxuICAgICAgICAgICAgLS1jdXJyZW50O1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXZSdsbCBhbHNvIGFkZCBzdXBwb3J0IGZvciBzdHJpbmdzIGluIG91ciBsYW5ndWFnZSB3aGljaCB3aWxsIGJlIGFueVxuICAgICAgICAvLyB0ZXh0IHN1cnJvdW5kZWQgYnkgZG91YmxlIHF1b3RlcyAoXCIpLlxuICAgICAgICAvL1xuICAgICAgICAvLyAgIChjb25jYXQgXCJmb29cIiBcImJhclwiKVxuICAgICAgICAvLyAgICAgICAgICAgIF5eXiAgIF5eXiBzdHJpbmcgdG9rZW5zXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFdlJ2xsIHN0YXJ0IGJ5IGNoZWNraW5nIGZvciB0aGUgb3BlbmluZyBxdW90ZTpcblxuICAgICAgICBpZiAoY2hhciA9PT0gJ1wiJykge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gJyc7XG5cbiAgICAgICAgICAgIGNoYXIgPSBpbnB1dFsrK2N1cnJlbnRdO1xuXG4gICAgICAgICAgICB3aGlsZSAoY2hhciAhPT0gJ1wiJykge1xuICAgICAgICAgICAgICAgIHZhbHVlICs9IGNoYXI7XG4gICAgICAgICAgICAgICAgY2hhciA9IGlucHV0WysrY3VycmVudF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRva2Vucy5wdXNoKHsgdHlwZTogJ3N0cmluZycsIHZhbHVlIH0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBMRVRURVJTID0gL1thLXpdL2k7XG4gICAgICAgIGlmIChMRVRURVJTLnRlc3QoY2hhcikpIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9ICcnO1xuICAgICAgICAgICAgd2hpbGUgKExFVFRFUlMudGVzdChjaGFyKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlICs9IGNoYXI7XG4gICAgICAgICAgICAgICAgY2hhciA9IGlucHV0WysrY3VycmVudF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b2tlbnMucHVzaCh7IHR5cGU6ICduYW1lJywgdmFsdWUgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc29sZS5sb2codG9rZW5zKTtcbiAgICByZXR1cm4gdG9rZW5zO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b2tlbml6ZXI7XG4iXSwibmFtZXMiOlsiY29uc29sZSIsImxvZyIsImlucHV0IiwidG9rZW5zIiwiY3VycmVudCIsImxlbmd0aCIsImNoYXIiLCJjaGFyQXQiLCJ0ZXN0IiwiTlVNQkVSUyIsInZhbHVlIiwicHVzaCIsInR5cGUiLCJMRVRURVJTIl0sInNvdXJjZVJvb3QiOiIifQ==