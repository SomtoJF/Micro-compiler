(()=>{"use strict";!function(e){console.log("compiling...");var r=function(e){for(var r=[],t=0;t<e.length;t++){var a=e.charAt(t);if("("!==a)if(")"!==a){if(!/\s/.test(a)){var n=/[0-9]/;if(n.test(a)){for(var p="";n.test(a);)p+=a,a=e[++t];r.push({type:"number",value:p}),--t}else if('"'!==a){var u=/[a-z]/i;if(!u.test(a))throw new TypeError("Micro-compiler cannot identify this character: "+a);for(p="";u.test(a);)p+=a,a=e[++t];r.push({type:"name",value:p})}else{for(p="",a=e[++t];'"'!==a;)p+=a,a=e[++t];r.push({type:"string",value:p})}}}else r.push({type:"paren",value:")"});else r.push({type:"paren",value:"("})}return r}("(add 2 (subtract 6 4))"),t=function(e){for(var r=0,t=function(){var a=e[r];if("number"===a.type)return r++,{type:"NumberLiteral",value:a.value};if("string"===a.type)return r++,{type:"StringLiteral",value:a.value};if("paren"===a.type&&"("===a.value){var n={type:"CallExpression",name:(a=e[++r]).value,params:[]};for(a=e[++r];"paren"!==a.type||"paren"===a.type&&")"!==a.value;)n.params.push(t()),a=e[r];return r++,n}throw new TypeError(a.type)},a={type:"Program",body:[]};r<e.length;)a.body.push(t());return a}(r);console.log(t.body)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,